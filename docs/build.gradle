plugins {
    id 'base' // Adds 'assemble', 'check', 'build', and 'clean' tasks.
    id 'jekyll' // comes from buildSrc/
}

//////////////////////////////////////////////// Javadoc ////////////////////////////////////////////////

apply from: "$rootDir/gradle/any/javadoc.gradle"

gradle.projectsEvaluated {  // Evaluate all projects first so that SourceSets will have been created for each.
    task buildJavadocAll(type: Javadoc) {
        description = "Generate Javadoc for all published Java subprojects in the thredds-data-server project."

        title = "TDS Javadoc (not public) v${project.version}"
        destinationDir = file("$buildDir/javadocAll/")

        source publicProjects.collect {project -> project.sourceSets.main.allJava}
        classpath = files(publicProjects.collect {project ->
            [project.sourceSets.main.compileClasspath, project.sourceSets.main.output]
        })
    }

    tasks.build {
        // Aggregates the individual "build*" tasks.
        dependsOn  buildJekyllSite, buildJavadocAll
    }
}


//////////////////////////////////////////////// Nexus ////////////////////////////////////////////////

apply from: "$rootDir/gradle/any/properties.gradle"  // For Nexus credential properties.

import edu.ucar.build.publishing.PublishToRawRepoTask

tasks.withType(PublishToRawRepoTask).all {  // Common PublishToRawRepoTask config.
    group = 'Documentation'

    host = 'https://artifacts.unidata.ucar.edu/'
    repoName = 'tds-docs'

    onlyIf {
        // Will be evaluated at task execution time, not during configuration.
        // Fails the build if the specified properties haven't been provided.
        username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
        password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
        return true
    }
}

task publishAsVersionedUserGuide(type: PublishToRawRepoTask, dependsOn: buildJekyllSite) {
    description = 'Publish user guide (versioned) to Nexus under /major.minor/.'

    publishSrc = jekyllDestinationDir
    destPath = "tds/$project.docVersion/userguide/"
}

task publishAsCurrentUserGuide(type: PublishToRawRepoTask, dependsOn: buildJekyllSite) {
    description = 'Publish the user guide to Nexus under /current/.'

    publishSrc = jekyllDestinationDir
    destPath = 'tds/current/userguide/'
}

gradle.projectsEvaluated {
    // These tasks must be in a "projectsEvaluated" block because they depend on tasks that are also in a
    // "projectsEvaluated" block.

    task publishAsVersionedJavadocAll(type: PublishToRawRepoTask, dependsOn: buildJavadocAll) {
        description = 'Publish Javadoc for all published Java subprojects in the thredds-data-server project to ' +
            'Nexus under /major.minor/.'

        publishSrc = tasks.buildJavadocAll.destinationDir
        destPath = "tds/$project.docVersion/javadocAll/"
    }

    task publishAsCurrentJavadocAll(type: PublishToRawRepoTask, dependsOn: buildJavadocAll) {
        description = 'Publish Javadoc for all published Java subprojects in the thredds-data-server project to ' +
            'Nexus under /current/.'

        publishSrc = tasks.buildJavadocAll.destinationDir
        destPath = 'tds/current/javadocAll/'
    }

    // We're deliberately NOT naming this task "publish", because we don't want it running when we do a:
    //     ./gradlew publish
    // from the root directory. It simply takes too long.
    task publishAllDocsAsVersioned(group: 'Documentation') {
        description = 'Publish user guide and Javadoc to Nexus under /major.minor/.'

        // Aggregates the individual "publish*" tasks.
        dependsOn publishAsVersionedUserGuide, publishAsVersionedJavadocAll
    }

    task publishAllDocsAsCurrent(group: 'Documentation') {
        description = 'Publish user guide and Javadoc to Nexus under /current/.'

        // Aggregates the individual "publish*" tasks.
        dependsOn publishAsCurrentUserGuide, publishAsCurrentJavadocAll
    }
}

import edu.ucar.build.publishing.DeleteFromNexusTask

// By default, this will perform a dry run, which simply prints the components that the query matched.
// To actually delete those components, do:  ./gradlew :docs:deleteFromNexus --dryRun=false
task deleteVersionedDocsFromNexus(group: 'Documentation', type: DeleteFromNexusTask) {
    description = 'Remove user guide and Javadoc on Nexus under /major.minor/.'
    host = 'https://artifacts.unidata.ucar.edu/'
    searchQueryParameters.repository = 'tds-docs'
    searchQueryParameters.group = "/tds/$project.docVersion/*"

    onlyIf {
        // Will be evaluated at task execution time, not during configuration.
        // Fails the build if the specified properties haven't been provided.
        username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
        password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
        return true
    }
}

task deleteCurrentDocsFromNexus(group: 'Documentation', type: DeleteFromNexusTask) {
    description = 'Remove user guide and Javadoc on Nexus under /current/.'
    host = 'https://artifacts.unidata.ucar.edu/'
    searchQueryParameters.repository = 'tds-docs'
    searchQueryParameters.group = '/tds/current/*'

    onlyIf {
        // Will be evaluated at task execution time, not during configuration.
        // Fails the build if the specified properties haven't been provided.
        username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
        password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
        return true
    }
}
