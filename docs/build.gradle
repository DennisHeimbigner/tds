plugins {
  id 'base' // Adds 'assemble', 'check', 'build', and 'clean' tasks.
  id 'com.github.jruby-gradle.base'
}

// Jekyll build/serve tasks

import com.github.jrubygradle.JRubyExec

repositories {
  mavenCentral()
  ruby.gems()
}

dependencies {
  // jekyll 4.x moved to using sassc (relies on c extension code) over sass (pure ruby version)
  // We will stay on jekyll 3.x until sassc works with jruby
  // see https://github.com/sass/sassc-ruby/issues/182
  gems 'rubygems:jekyll:3.8.7'
}

// Names of the directories under src/public/ that contain a jekyll documentation set
def docSets = ['userguide', 'adminguide', 'quickstart', 'devguide']

///////////////////////////////////////// Jekyll Sites /////////////////////////////////////////

// aggregator tasks (aggregate individual doc set build and publishing tasks)
def buildSiteTask = tasks.create(name: "buildAllJekyllSites") {
  group = 'Documentation'
  description = 'Build all jekyll sites.'
}

def publishVersionedJekyllSitesTask = tasks.create(name: "publishAllJekyllSitesVersioned") {
  group = 'Documentation'
  description = 'Publish all jekyll sites (versioned).'
}

def publishCurrentJekyllSitesTask = tasks.create(name: "publishAllJekyllSitesCurrent") {
  group = 'Documentation'
  description = 'Publish all jekyll sites (current).'
}

publishVersionedJekyllSitesTask.dependsOn(buildSiteTask)
publishCurrentJekyllSitesTask.dependsOn(buildSiteTask)

import edu.ucar.build.publishing.PublishToRawRepoTask

// setup build and publish tasks associated with each individual documentation set
docSets.each { docSet ->
  def taskName = docSet.substring(0,1).toUpperCase() + docSet.substring(1)
  taskName = taskName.replace('guide', 'Guide')
  def source = file("src/public/$docSet/")
  def destination = file("$buildDir/jekyll/$docSet/")

  tasks.create(name: "build${taskName}", type: JRubyExec) {
    group = 'Documentation'
    description = "Build $docSet jekyll site."

    inputs.files source
    outputs.dir destination

    script 'jekyll'

    scriptArgs 'build'
    scriptArgs '--source=' + source.absolutePath
    scriptArgs '--destination=' + destination.absolutePath

    // Consider enabling this to help us determine when pages need to be pushed to Nexus.
    // A copy of .jekyll-metadata could be stored in the repo and then compared to the local file.
    // See https://jekyllrb.com/docs/configuration/#incremental-regeneration
    // scriptArgs "--incremental"
  }

  tasks.create(name: "serve${taskName}", type: JRubyExec) {
    group = 'Documentation'
    description = "Serve $docSet jekyll site."

    // This task starts a server; it is never considered UP-TO-DATE.
    outputs.upToDateWhen {
      false
    }

    script 'jekyll'

    scriptArgs 'serve'
    scriptArgs '--source=' + source.absolutePath
    scriptArgs '--destination=' + destination.absolutePath
  }

  tasks.create(name: "publishAsVersioned${taskName}", type: PublishToRawRepoTask, dependsOn: "build${taskName}") {
    description = "Publish $docSet (versioned) to Nexus under /major.minor/."

    publishSrc = destination.absolutePath
    destPath = "tds/$project.docVersion/$docSet/"
  }

  tasks.create(name: "publishAsCurrent${taskName}", type: PublishToRawRepoTask, dependsOn: "build${taskName}") {
    description = "Publish the $docSet to Nexus under /current/."

    publishSrc = destination.absolutePath
    destPath = "tds/current/$docSet/"
  }

  // register tasks with the appropriate aggregator tasks
  buildSiteTask.dependsOn("build${taskName}")
  publishVersionedJekyllSitesTask.dependsOn("publishAsVersioned${taskName}")
  publishCurrentJekyllSitesTask.dependsOn("publishAsCurrent${taskName}")
}

//////////////////////////////////////////////// Javadoc ////////////////////////////////////////////////

apply from: "$rootDir/gradle/any/javadoc.gradle"

gradle.projectsEvaluated {
  // Evaluate all projects first so that SourceSets will have been created for each.
  task buildJavadocAll(type: Javadoc) {
    description = "Generate Javadoc for all published Java subprojects in the thredds-data-server project."

    title = "TDS Javadoc (not public) v${project.version}"
    destinationDir = file("$buildDir/javadocAll/")

    source javaProjects.collect {project -> project.sourceSets.main.allJava}
    classpath = files(javaProjects.collect {project ->
      [project.sourceSets.main.compileClasspath, project.sourceSets.main.output]
    })
  }

  // These tasks must be in a "projectsEvaluated" block because they depend on tasks that are also in a
  // "projectsEvaluated" block.
  task publishAsVersionedJavadocAll(type: PublishToRawRepoTask, dependsOn: buildJavadocAll) {
    description = 'Publish Javadoc for all published Java subprojects in the thredds-data-server project to ' +
      'Nexus under /major.minor/.'

    publishSrc = tasks.buildJavadocAll.destinationDir
    destPath = "tds/$project.docVersion/javadocAll/"
  }

  task publishAsCurrentJavadocAll(type: PublishToRawRepoTask, dependsOn: buildJavadocAll) {
    description = 'Publish Javadoc for all published Java subprojects in the thredds-data-server project to ' +
      'Nexus under /current/.'

    publishSrc = tasks.buildJavadocAll.destinationDir
    destPath = 'tds/current/javadocAll/'
  }

  // We're deliberately NOT naming this task "publish", because we don't want it running when we do a:
  //   ./gradlew publish
  // from the root directory. It simply takes too long.
  task publishAllDocsAsVersioned(group: 'Documentation') {
    description = 'Publish Jekyll Docs and Javadoc to Nexus under /major.minor/.'

    // Aggregates the individual "publish*" tasks.
    dependsOn publishVersionedJekyllSitesTask, publishAsVersionedJavadocAll
  }

  task publishAllDocsAsCurrent(group: 'Documentation') {
    description = 'Publish Jekyll Docs and Javadoc to Nexus under /current/.'

    // Aggregates the individual "publish*" tasks.
    dependsOn publishCurrentJekyllSitesTask, publishAsCurrentJavadocAll
  }

  tasks.build {
    // Aggregates the individual "build*" tasks.
    dependsOn  buildSiteTask, buildJavadocAll
  }
}

import edu.ucar.build.publishing.DeleteFromNexusTask

// By default, this will perform a dry run, which simply prints the components that the query matched.
// To actually delete those components, do:  ./gradlew :docs:deleteFromNexus --dryRun=false
task deleteVersionedDocsFromNexus(group: 'Documentation', type: DeleteFromNexusTask) {
  description = 'Remove Jekyll Docs and Javadoc on Nexus under /major.minor/.'
  host = 'https://artifacts.unidata.ucar.edu/'
  searchQueryParameters.repository = 'tds-docs'
  searchQueryParameters.group = "/tds/$project.docVersion/*"

  onlyIf {
    // Will be evaluated at task execution time, not during configuration.
    // Fails the build if the specified properties haven't been provided.
    username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
    password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    return true
  }
}

task deleteCurrentDocsFromNexus(group: 'Documentation', type: DeleteFromNexusTask) {
  description = 'Remove Jekyll Docs and Javadoc on Nexus under /current/.'
  host = 'https://artifacts.unidata.ucar.edu/'
  searchQueryParameters.repository = 'tds-docs'
  searchQueryParameters.group = '/tds/current/*'

  onlyIf {
    // Will be evaluated at task execution time, not during configuration.
    // Fails the build if the specified properties haven't been provided.
    username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
    password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    return true
  }
}

//////////////////////////////////////////////// Nexus ////////////////////////////////////////////////

apply from: "$rootDir/gradle/any/properties.gradle"  // For Nexus credential properties.

tasks.withType(PublishToRawRepoTask).all {  // Common PublishToRawRepoTask config.
  group = 'Documentation'

  host = 'https://artifacts.unidata.ucar.edu/'
  repoName = 'tds-docs'

  onlyIf {
    // Will be evaluated at task execution time, not during configuration.
    // Fails the build if the specified properties haven't been provided.
    username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
    password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    return true
  }
}
